/** ORDERING MATTERS in a CSS style sheet when we need to override styles of elements
    the LOWER the declaration, the higher the priority

    On this page we define various CSS Selectors to style our elements
*/

/** 
Declare custom properties (CSS variables) in the root psuedo-class to be used throughout the whole HTML document 
    - We use CSS variables when we want to change multiple elements at once by changing only 1 value
    (Here, I am defining a CSS variable "title-des-color" to store the color of the description, so
    that I can use this color in other elements using the var() function to insert the value of a custom CSS property)
*/
:root {
  --title-des-color: rgb(80, 151, 184);
  --primary-background-color: hsl(264, 19%, 45%);
}

body {
  background-color: rgb(228, 213, 213);
}

header {
  background-color: var(--primary-background-color);

  width: 100%;
  height: 100%;
}

/** Used !important key word to override all other styles (in this case colors) of any h1 element */
h1 {
  font-size: 60px;
  text-align: center;
  color: darkcyan !important;
  font-family: "Grenze Gotisch", cursive;
  margin-bottom: -40px;
}

h2 {
  text-align: left;
  font-size: 23px;
  color: salmon;
  margin-bottom: 20px;
  margin-top: 50px;
  background-color: rgba(
    45,
    45,
    45,
    0.15
  ); /* rgba uses rbg coloring includes alpha for opacity */
}

/** There are two diff. type of length unit measurements: ABSOLUTE and RELATIVE 
    absolute: refers to the the absolute or exact physical measurements such px, mm, inches, etc.
    relative: refers to the size in relation to the font size
        em: is the size relative to font size of direct parent element
        rem: is the size relative to the font size of the html root (scale to browser font settings)
    
    ** Use rem units unless you're sure you need em units, including on font sizes. **
*/
h3 {
  background-color: lightgrey;
  margin: 15px;
  padding: 1.5em;
  text-align: center;
}

/** This is an example of a Type Selector */
h5 {
  font-size: 20px;
  color: var(--title-des-color);
}

table {
  margin-top: -20px;
  margin-bottom: 40px;
  border: 2px solid black;
  border-collapse: collapse;
  width: 50%;
}

th {
  background-color: rgb(145, 182, 194);
}

th,
td {
  border: 1px solid black;
  padding: 10px;
  text-align: center;
}

label {
  padding-right: 20px;
}

/** Use of child selector on an ordered list, to style a direct children element */
ol > ul > li {
  color: blue;
}

/** Use of descendants selector on a unordered list to style ALL CHILDREN of a parent element 
(All list elements of the unordered list get styled with the color turquoise)
*/
ul li {
  color: turquoise;
}

p {
  line-height: 2; /* makes paragraph text double space */
  font-weight: 600; /* adds weight to text (boldness) */
}

.title-des {
  margin-top: 20px;
  font-size: 25px;
  text-align: center;
  color: rgb(80, 151, 184);
  font-family: "Grenze Gotisch", cursive;
}

/** This is an example of a Class Selector */
.profile-image {
  width: 50%;
}

.thick-black-border {
  border-color: black;
  border-width: 5px;
  border-style: solid;
  border-radius: 5px;
}

.blue-border {
  margin-top: 20px;
  background-color: rgb(108, 197, 209);
  padding: 1px;
}

.block-text {
  margin-top: 2.5px;
  margin-bottom: 60px;
  padding: 25px;
}

.silver-background {
  background-color: silver;
}

/** Practiced the basics of the Box Model (content, padding, border, margin)  
    -**B/c of the Box Model, elements that are next together their margins collapse together --> share a margin
        and who ever margin is bigger, that is the margin that is used
    Ex) box-one's margin-bottom is used since 60 > 20 
    (There is 60px between box-one & box-two) 
*/
.box-one {
  background-color: lightblue;
  padding: 20px;
  border: 30px solid black;
  width: 100px;
  height: 100px;
  margin-bottom: 60px;
}

.box-two {
  background-color: red;
  padding: 20px;
  border: 2px dotted yellow;
  margin-top: 20px;
  width: 300px;
  height: 150px;
}

/** Here we use Attribute Selectors to style elements with the same attribute values */
[type="radio"] {
  margin-bottom: 20px;
}

/** Here we use clockwise notation to specify the margin of the checkboxes (top, right, bottom, left) */
[type="checkbox"] {
  margin: 0px 5px 40px 0px;
}

/** Unlike we did above, we are now using an Attribute Selector on a particular element, we can style elements with a particular element w/ a particular attribute value */
footer[id="footer"] {
  color: gray;
}

footer {
  text-align: center;
  background-color: var(--primary-background-color);
}

/* we can use absolute positions to "lock" an element within its parent 
  (Here, we lock the position of a form inside the section parent element (id=form-section)
*/
form {
  position: absolute;
  top: 10px;
  left: 500px;
  right: 500px;
}

/* relative positioning allows us to move elements and remove them from the "normal flow" 
  of the page relative to its current position.
  - we can specify how far we want an element moved away from other elements
    by using (left, right, top, bottom) with px, em, rem
*/
#form-section {
  position: relative;
}

/** Example of a ID Selector the id attribute will always override elements that are associated to a class */
#personal-des {
  color: rgb(161, 66, 79);
}

/** We use a psuedo-class selector of the button tag
    we can change the hover state by setting the background color to a diff color
*/
button:hover {
  background-color: orange;
}

#nav-bar > ul > li > a {
  text-decoration: none;
}

#nav-bar > ul {
  padding: 5px 0px 5px 30px;
}

#nav-bar li {
  display: inline-flex;
  list-style: none;
  padding: 5px 0px 5px 30px;
  margin-right: 20px;
}

#nav-bar {
  margin-top: -20px;
  background-color: rgba(126, 122, 122, 0.781);
  width: 100%;
}

/* Can use margin to center elements horizontally in the window of a browser setting margin to "auto" */
#box-card-1 {
  margin: auto;
}

/* linear-gradient(gradient-direction (angle value in degrees), color 1, color 2, etc) */
#gradient-box {
  border-radius: 20px;
  width: 70%;
  height: 400px;
  margin: 50px auto; /* (top-bottom, left-right) */
  background: linear-gradient(35deg, #ccffff, #ffcccc);

  /* we can use the transform property in CSS to scale elements to diff sizes
    ex) we'll size this colored div to 0.5 (half) times smaller than the size we originally specified)
  */
  transform: scale(0.5);
}

/** Media queries allow us to modify our web page by changing our CSS on different device screen sizes 
    min-width: Mobile first
    max-width: Desktop first
    (This is one way how we can make our website responsive) **Make sure to put at the bottom of stylesheet*
*/
@media (max-width: 600px) {
  body {
    background-color: rgb(163, 150, 150);
  }
}
